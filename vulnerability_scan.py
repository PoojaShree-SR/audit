import psutil
from scapy.all import sr1, IP, TCP
import os
import tkinter as tk
from tkinter import filedialog

# Function to get the system's CPU and memory stats using psutil
def get_system_stats():
    print("\nGathering system stats...")
    cpu_percent = psutil.cpu_percent(interval=1)
    memory_info = psutil.virtual_memory()
    print(f"CPU Usage: {cpu_percent}%")
    print(f"Total Memory: {memory_info.total / (1024 ** 3):.2f} GB")
    print(f"Available Memory: {memory_info.available / (1024 ** 3):.2f} GB")

# Function to scan open ports on a specific IP address using Scapy
def port_scan(ip):
    open_ports = []
    print(f"\nScanning IP address {ip} for open ports...")
    for port in range(20, 1025):
        pkt = sr1(IP(dst=ip)/TCP(dport=port,flags="S"),timeout=0.5,verbose=0)
        if pkt and pkt.haslayer(TCP) and pkt[TCP].flags == 0x12:
            open_ports.append(port)
            print(f"Port {port} is open.")
    return open_ports

# Function to generate a compliance report
def generate_report(ip, open_ports):
    print("\nGenerating compliance report...")
    report = f"Compliance Audit Report for IP: {ip}\n"
    report += "="*50 + "\n"
    report += f"Open Ports: {', '.join(map(str, open_ports)) if open_ports else 'None'}\n"
    
    # Use Tkinter to ask where to save the file
    root = tk.Tk()
    root.withdraw()  # Hide Tkinter root window
    report_file_path = filedialog.asksaveasfilename(defaultextension=".txt", filetypes=[("Text files", "*.txt")])
    
    if report_file_path:
        with open(report_file_path, "w") as report_file:
            report_file.write(report)
        print(f"Report saved to: {report_file_path}")
    else:
        print("Report not saved.")

# Main function to perform vulnerability scan
def vulnerability_scan():
    get_system_stats()  # Step 1: Get system stats

    # Step 2: Input the IP address to scan
    ip_address = input("\nEnter the IP address to scan: ")
    
    # Step 3: Scan open ports
    open_ports = port_scan(ip_address)

    # Step 4: Generate and save the report
    generate_report(ip_address, open_ports)

if __name__ == "__main__":
    print("=== Compliance Audit Simulation ===")
    vulnerability_scan()
